[
	{
		"module":"global",
		"description": "extensions to the global namespace",
		"functions": [
			{ "function":"breakpoint",
				"parameters": [
					{ "name":"args", "type":"any", "defaultValue":null },
					{ "name":"...", "type":"any", "defaultValue":null }
				],
				"returnType": null,
				"description": "breaks if a debugger is attached and passes its argument list to it. Passed arguments are available as array args in the debug session."
			}
		],
		"callbacks": [
			{ "function":"enter",
				"parameters": [ 
					{ "name":"args", "type":"array<string>", "description": "the arguments passed to switchScene() or as command line parameters after the script name if the scene was loaded at startup" }
				],
				"returnType": null,
				"description": "Called when entering a script/scene, either on initial load or after a call to switchScene()"
			},
			{ "function":"input",
				"parameters": [
					{ "name":"evt", "type":"string", "description": "the input event type name. Currently 'button' or 'axis'." },
					{ "name":"device", "type":"int", "description": "the input device ID. 0 for primary device." },
					{ "name":"id", "type":"int", "description": "axis or button id, starting with 0" },
					{ "name":"value", "type":"float", "description": "the input event value, 0.0 or 1.0 for buttons, or a value between -1.0 and 1.0 for axes" },
					{ "name":"value2", "type":"float", "defaultValue":null, "description": "the second input event value, if applicable. Currently unused." }
				],
				"returnType": null,
				"description": "Called when an input event occurs"
			},
			{ "function":"update",
				"parameters": [
					{ "name":"deltaT", "type":"double", "description": "time in seconds since the last call to update()" }
				],
				"returnType": "bool",
				"description": "Called each frame before draw to update the game state. Return true to keep the main loop running."
			},
			{ "function":"draw",
				"parameters": [ { "name":"gfx", "type":"gfx", "description": "the graphics context to call draw functions on" } ],
				"returnType": null,
				"description": "Called to render a frame after update"
			},
			{ "function":"leave",
				"parameters": [ ],
				"returnType": null,
				"description": "Called when leaving a scene before switching to another scene or shutting down the application, either by returning false from update(), by closing the application window, or by pressing buttons 6 and 7 together."
			}
		]
	},
	{
		"module":"window",
		"description": "functions to query and manipulate the application window",
		"functions": [
			{ "function":"width",
				"parameters": [ ],
				"returnType": "int",
				"description": "Returns the current window width in pixels"
			},
			{ "function":"height",
				"parameters": [ ],
				"returnType": "int",
				"description": "Returns the current window height in pixels"
			},
			{ "function":"color",
				"parameters": [ { "name":"color", "type":"uint32", "description": "window background color. Usually a hex value like 0xRRGGBBAA." } ],
				"returnType": null,
				"description": "Sets the window background color"
			},
			{ "function":"switchScene",
				"parameters": [
					{ "name":"script", "type":"string", "description": "the file name of the script that takes over the event handling" },
					{ "name":"args", "type":"any", "defaultValue":null, "description": "the argument to be passed to the new script. Will be converted to string." },
					{ "name":"...", "type":"any", "defaultValue":null, "description": "optional additional arguments to be passed to the new script" }
				],
				"returnType": null,
				"description": "Switches to another script as event handler. Calls leave() on the current scene before switching and enter(args) on the new scene. This is useful for organizing an app/game in separate scenes or screens."
			}
		]
	},
	{
		"module":"gfx",
		"description": "2D graphics context passed to the draw() callback",
		"functions": [
			{ "function":"color",
				"parameters": [
					{ "name":"color", "type":"uint32", "description": "the draw color. Usually a hex value like 0xRRGGBBAA." }
				],
				"returnType": null,
				"description": "Sets the draw color"
			},
			{ "function":"lineWidth",
				"parameters": [
					{ "name":"w", "type":"float", "description": "the line width. Default is 1.0 pixels" }
				],
				"returnType": null,
				"description": "Sets the line width for drawLine and drawRect"
			},
			{ "function":"transform",
				"parameters": [
					{ "name":"x", "type":"float", "description": "the translation in horizontal direction" },
					{ "name":"y", "type":"float", "description": "the translation in vertical direction" },
					{ "name":"rot", "type":"float", "defaultValue":0, "description": "the rotation angle in radians" },
					{ "name":"sc", "type":"float", "defaultValue":1.0, "description": "the uniform scale factor" }
				],
				"returnType": null,
				"description": "Multiplies the current transformation matrix with a new transformation defined by translation (x,y), rotation rot, and uniform scale sc. Transformations are applied in the order: scale, rotate, translate."
			},
			{ "function":"save",
				"parameters": [ ],
				"returnType": null,
				"description": "Pushes the current graphics state (transformation matrix, color, line width) onto a stack. Up to 7 states can be stacked."
			},
			{ "function":"restore",
				"parameters": [ ],
				"returnType": null,
				"description": "restores a previously saved graphics state from the stack"
			},
			{ "function":"clipRect",
				"parameters": [
					{ "name":"x", "type":"int", "description": "the horizontal position of the clipping rectangle's upper left corner" },
					{ "name":"y", "type":"int", "description": "the vertical position of the clipping rectangle's upper left corner" },
					{ "name":"w", "type":"int", "description": "the width of the clipping rectangle" },
					{ "name":"h", "type":"int", "description": "the height of the clipping rectangle" }
				],
				"returnType": null,
				"description": "Sets the clipping viewport for all subsequent draw calls in screen space. Default is (0,0,width,height) of the window. Use negative width/height to disable clipping."
			},
			{ "function":"fillRect",
				"parameters": [
					{ "name":"x", "type":"float", "description": "the horizontal position of the rectangle's upper left corner" },
					{ "name":"y", "type":"float", "description": "the vertical position of the rectangle's upper left corner" },
					{ "name":"w", "type":"float", "description": "the width of the rectangle" },
					{ "name":"h", "type":"float", "description": "the height of the rectangle" }
				],
				"returnType": null,
				"description": "Draws a filled rectangle at position (x,y) with width w and height h"
			},
			{ "function":"drawRect",
				"parameters": [
					{ "name":"x", "type":"float", "description": "the horizontal position of the rectangle's upper left corner" },
					{ "name":"y", "type":"float", "description": "the vertical position of the rectangle's upper left corner" },
					{ "name":"w", "type":"float", "description": "the width of the rectangle" },
					{ "name":"h", "type":"float", "description": "the height of the rectangle" }
				],
				"returnType": null,
				"description": "Draws the outline of a rectangle at position (x,y) with width w and height h"
			},
			{ "function":"drawLine",
				"parameters": [
					{ "name":"x0", "type":"float", "description": "the horizontal position of the line's start point" },
					{ "name":"y0", "type":"float", "description": "the vertical position of the line's start point" },
					{ "name":"x1", "type":"float", "description": "the horizontal position of the line's end point" },
					{ "name":"y1", "type":"float", "description": "the vertical position of the line's end point" }
				],
				"returnType": null,
				"description": "Draws a line from (x0,y0) to (x1,y1)"
			},
			{ "function":"drawImage",
				"parameters": [
					{ "name":"image", "type":"uint32", "description":"the image resource handle" },
					{ "name":"x", "type":"float", "description": "the horizontal position of the image" },
					{ "name":"y", "type":"float", "description": "the vertical position of the image" },
					{ "name":"rot", "type":"float", "defaultValue":0.0, "description": "the rotation angle of the image" },
					{ "name":"sc", "type":"float", "defaultValue":1.0, "description": "the scale factor of the image" },
					{ "name":"flip", "type":"int", "defaultValue":0, "description": "the flip mode of the image. 0 = no flip, 1 = horizontal flip, 2 = vertical flip, 3 = both flip" }
				],
				"returnType": null,
				"description": "Draws an image"
			},
			{ "function":"fillText",
				"parameters": [
					{ "name":"font", "type":"uint32", "description": "the font resource handle. Use 0 for built-in 12x16 font" },
					{ "name":"x", "type":"float", "description": "the horizontal position of the text" },
					{ "name":"y", "type":"float", "description": "the vertical position of the text" },
					{ "name":"str", "type":"string", "description": "the text string to draw" },
					{ "name":"align", "type":"int", "defaultValue":0, "description": "the text alignment. 0 = left, 1 = center, 2 = right" }
				],
				"returnType": null,
				"description": "Draws filled text"
			}
		]
	},
	{
		"module":"audio",
		"description": "audio playback functions",
		"functions": [
			{ "function":"replay",
				"parameters": [
					{ "name":"sample", "type":"uint32", "description":"the audio sample resource handle" },
					{ "name":"volume", "type":"float", "defaultValue":1.0, "description":"the volume level to play the sample at" },
					{ "name":"balance", "type":"float", "defaultValue":0.0, "description":"the stereo balance of the sample in the range [-1.0, 1.0]" },
					{ "name":"detune", "type":"float", "defaultValue":0.0, "description":"the detune amount in halftones" }
				],
				"returnType": "uint32",
				"description": "immediately plays a sample identified by its handle. Returns a track handle that can be used to manipulate the playback"
			},
			{ "function":"volume",
				"parameters": [
					{ "name":"track", "type":"uint32", "description":"the track handle returned by the replay function" },
					{ "name":"volume", "type":"float", "description":"the new volume level for the track in the range [0.0, 1.0]" },
					{ "name":"fadeTime", "type":"float", "defaultValue":0.0, "description":"the time in seconds to fade to 0. Other volume levels are not supported yet." }
				],
				"returnType": null,
				"description": "sets the volume level of a currently playing track. Set to 0.0 to stop the track."
			}
		]
	},
	{
		"module":"resource",
		"description": "functions to load and create images, audio samples and fonts",
		"functions": [
			{ "function":"getImage",
				"parameters": [
					{ "name":"name", "type":"string", "description":"the image file name relative to the app's root directory" },
					{ "name":"scale", "type":"float", "defaultValue":1.0, "description":"the scale factor of the image. Only relevant for SVG vector images" },
					{ "name":"centerX", "type":"float", "defaultValue":0.0, "description":"the relative horizontal center position of the image in range [0.0, 1.0]" },
					{ "name":"centerY", "type":"float", "defaultValue":0.0, "description":"the relative vertical center position of the image in range [0.0, 1.0]" },
					{ "name":"filtering", "type":"int", "defaultValue":1, "description":"the image filtering mode. 0 = nearest neighbor, 1 = bilinear" }
				],
				"returnType": "uint32",
				"description": "loads an image from the app's directory. Supported image formats are PNG, JPEG, and SVG. Returns image handle or 0 if the image could not be found or loaded"
			},
			{ "function":"createImage",
				"parameters": [
					{ "name":"data", "type":"array<uint32>", "description":"image data as array of uint32 RGBA pixels, or as Uint32Array (Javascript only)" },
					{ "name":"width", "type":"int", "description":"the image width in pixels" },
					{ "name":"height", "type":"int", "description":"the image height in pixels" },
					{ "name":"centerX", "type":"float", "defaultValue":0.0, "description":"the relative horizontal center position of the image in range [0.0, 1.0]" },
					{ "name":"centerY", "type":"float", "defaultValue":0.0, "description":"the relative vertical center position of the image in range [0.0, 1.0]" },
					{ "name":"filtering", "type":"int", "defaultValue":1, "description":"the image filtering mode. 0 = nearest neighbor, 1 = bilinear" }
				],
				"returnType": "uint32",
				"description": "creates an image from raw pixel data. Returns image handle or 0 if the image could not be created"
			},
			{ "function":"createSVGImage",
				"parameters": [
					{ "name":"svg", "type":"string", "description":"the SVG image data as a string" },
					{ "name":"scale", "type":"float", "defaultValue":1.0, "description":"the scale factor of the image" },
					{ "name":"centerX", "type":"float", "defaultValue":0.0, "description":"the relative horizontal center position of the image in range [0.0, 1.0]" },
					{ "name":"centerY", "type":"float", "defaultValue":0.0, "description":"the relative vertical center position of the image in range [0.0, 1.0]" }
				],
				"returnType": "uint32",
				"description": "creates an SVG image from an SVG string. Returns image handle or 0 if the image could not be created"
			},
			{ "function":"getTileGrid",
				"parameters": [
					{ "name":"image", "type":"uint32", "description":"the handle of the parent image" },
					{ "name":"tilesX", "type":"int", "description":"the number of tiles in horizontal direction" },
					{ "name":"tilesY", "type":"int", "defaultValue":1, "description":"the number of tiles in vertical direction" },
					{ "name":"borderW", "type":"int", "defaultValue":0, "description":"the width of the border around tiles in pixels" }
				],
				"returnType": "uint32",
				"description": "creates multiple tile images an existing image. The image is divided into tilesX x tilesY tiles, optionally with a border of borderW pixels between the tiles. Returns handle of the first tile or 0 if the tile images could not be created."
			},
			{ "function":"getAudio",
				"parameters": [
					{ "name":"name", "type":"string", "description":"the audio file name relative to the app's root directory" }
				],
				"returnType": "uint32",
				"description": "loads an audio sample from the app's directory. Returns audio sample handle or 0 if the sample could not be found or loaded"
			},
			{ "function":"createAudio",
				"parameters": [
					{ "name":"data", "type":"array<float>", "description":"PCM audio samples either passed as array of floats [-1.0, 1.0], or as Float32Array (Javascript only)" },
					{ "name":"numChannels", "type":"int", "defaultValue":1, "description":"the number of audio channels (1 = mono, 2 = stereo)" }
				],
				"returnType": "uint32",
				"description": "creates an audio sample from raw PCM data. Returns audio sample handle or 0 if the sample could not be created"
			},
			{ "function":"getFont",
				"parameters": [
					{ "name":"name", "type":"string", "description":"the font file name" },
					{ "name":"fontSize", "type":"uint32", "defaultValue":16, "description":"the font size" }
				],
				"returnType": "uint32",
				"description": "loads a font from the app's directory at the specified size. Supported font formats are TTF or image formats. In the latter case, it is assumed that the image contains a grid of 16x16 glyphs. Returns font handle or 0 if the font could not be found or loaded."
			},
			{ "function":"setStorageItem",
				"parameters": [
					{ "name":"key", "type":"string", "description":"the key name" },
					{ "name":"value", "type":"string", "description":"the value to store" }
				],
				"returnType": null,
				"description": "sets a value in an app-specific persistent key-value store"
			},
			{ "function":"getStorageItem",
				"parameters": [
					{ "name":"key", "type":"string", "description":"the key name" }
				],
				"returnType": "string",
				"description": "retrieves a value from an app-specific persistent key-value store. Returns null if the key does not exist."
			}
		]
	}
]
